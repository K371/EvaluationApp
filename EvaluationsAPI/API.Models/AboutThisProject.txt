This project contains all the classes which will either be 
accepted or returned to and from the API.Services.

They are divided up into two categories:

- DTO classes
  These are simple POCO classes, similar to entity classes,
  but not necessarily one-to-one. The DTO class could therefore 
  "divert" somewhat from the table it represents, usually by
  adding data, and also by removing properties not deemed
  necessary for the user to know about (such as if the 
  entity/table contains "Inserted"/"Updated"/"Deleted" date
  fields). Also, there could be more than one versions of
  a given DTO class, i.e. one which is returned to non-authenticated
  users, another which is returned to admins, the third when
  a list of objects is requested, a fourth when a single object 
  is requested etc.

 - ViewModels
   ViewModels differ from DTO classes in that they usually contain
   other classes. A ViewModel should therefore contain DTO classes,
   either single instances or collections. A ViewModel class could 
   also contain primitive properties, such as a name of some entity,
   but will usually contain such data as well as DTO classes (one 
   or many).

Be aware that the domain classes (i.e. entity classes which map to 
tables or views) should NOT be visible in here, these classes should
not contain instances of entity classes.